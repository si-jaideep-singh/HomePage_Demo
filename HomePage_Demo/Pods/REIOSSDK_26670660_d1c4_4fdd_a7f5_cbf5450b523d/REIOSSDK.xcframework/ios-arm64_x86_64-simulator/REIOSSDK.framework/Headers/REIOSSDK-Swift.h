#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef REIOSSDK_SWIFT_H
#define REIOSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="REIOSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CampaignTracking")
@interface CampaignTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSObject;
@class NSDate;

@interface CampaignTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


SWIFT_CLASS("_TtC8REIOSSDK11Deeplinking")
@interface Deeplinking : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS_NAMED("EventTracking")
@interface EventTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface EventTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


SWIFT_CLASS_NAMED("FieldTracking")
@interface FieldTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

@interface FieldTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, copy) NSString * _Nullable captureType;
@property (nonatomic, copy) NSString * _Nullable identifier;
@property (nonatomic, copy) NSString * _Nullable formId;
@property (nonatomic, copy) NSString * _Nullable screenName;
@property (nonatomic, copy) NSString * _Nullable descriptionn;
@property (nonatomic, copy) NSString * _Nullable campaignId;
@property (nonatomic, copy) NSString * _Nullable markAsGoal;
@property (nonatomic, copy) NSString * _Nullable minDuration;
@property (nonatomic, copy) NSString * _Nullable minLength;
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end

@class NSStream;

SWIFT_CLASS("_TtC8REIOSSDK19FoundationTransport")
@interface FoundationTransport : NSObject <NSStreamDelegate>
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK25HandleRSInboxSelectedItem_")
@protocol HandleRSInboxSelectedItem
- (void)didSendSelectedItemWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@class UIButton;

SWIFT_PROTOCOL("_TtP8REIOSSDK19InAppButtonDelegate_")
@protocol InAppButtonDelegate
- (void)didTapInappBUttonWithButton:(UIButton * _Nonnull)button;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK18InappCloseDelegate_")
@protocol InappCloseDelegate
- (void)closeInappContainer;
@end






@class NSURLSession;
@class NSURLSessionWebSocketTask;
@class NSData;

SWIFT_CLASS("_TtC8REIOSSDK12NativeEngine") SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(watchos,introduced=6.0) SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(macos,introduced=10.15)
@interface NativeEngine : NSObject <NSURLSessionDataDelegate, NSURLSessionWebSocketDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8REIOSSDK19NotificationHandler")
@interface NotificationHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS_NAMED("NotificationList")
@interface NotificationList : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationList (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


/// A class that represents an emit that will request an ack that has not yet been sent.
/// Call <code>timingOut(after:callback:)</code> to complete the emit
/// Example:
/// \code
/// socket.emitWithAck("myEvent").timingOut(after: 1) {data in
///     ...
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK13OnAckCallback")
@interface OnAckCallback : NSObject
/// Completes an emitWithAck. If this isn’t called, the emit never happens.
/// \param seconds The number of seconds before this emit times out if an ack hasn’t been received.
///
/// \param callback The callback called when an ack is received, or when a timeout happens.
/// To check for timeout, use <code>SocketAckStatus</code>’s <code>noAck</code> case.
///
- (void)timingOutAfter:(double)seconds callback:(void (^ _Nonnull)(NSArray * _Nonnull))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK29REiosContentExtensionReceiver_")
@protocol REiosContentExtensionReceiver
- (void)didCloseContentExtention;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK21REiosDeeplinkReceiver_")
@protocol REiosDeeplinkReceiver
- (void)didReceiveDeeplinkWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@protocol REiosNotificationReceiver;
@protocol REiosSmartLinkReceiver;
@protocol RSInboxDelegate;
@protocol RSNotificationItemDeletedDelegate;

SWIFT_CLASS("_TtC8REIOSSDK12REiosHandler")
@interface REiosHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isBarndHandleInboxSelectedItem;)
+ (BOOL)isBarndHandleInboxSelectedItem SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsBarndHandleInboxSelectedItem:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosNotificationReceiver> _Nullable notificationDelegate;)
+ (id <REiosNotificationReceiver> _Nullable)notificationDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationDelegate:(id <REiosNotificationReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosDeeplinkReceiver> _Nullable deeplinkDelegate;)
+ (id <REiosDeeplinkReceiver> _Nullable)deeplinkDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeeplinkDelegate:(id <REiosDeeplinkReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosSmartLinkReceiver> _Nullable smartLinkDelegate;)
+ (id <REiosSmartLinkReceiver> _Nullable)smartLinkDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setSmartLinkDelegate:(id <REiosSmartLinkReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <RSInboxDelegate> _Nullable inboxDelegate;)
+ (id <RSInboxDelegate> _Nullable)inboxDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInboxDelegate:(id <RSInboxDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <InAppButtonDelegate> _Nullable inappButtonDelegate;)
+ (id <InAppButtonDelegate> _Nullable)inappButtonDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInappButtonDelegate:(id <InAppButtonDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <InappCloseDelegate> _Nullable inappCloseButtonDelegate;)
+ (id <InappCloseDelegate> _Nullable)inappCloseButtonDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInappCloseButtonDelegate:(id <InappCloseDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosContentExtensionReceiver> _Nullable contentExtDelegate;)
+ (id <REiosContentExtensionReceiver> _Nullable)contentExtDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setContentExtDelegate:(id <REiosContentExtensionReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <RSNotificationItemDeletedDelegate> _Nullable inboxItemDelegate;)
+ (id <RSNotificationItemDeletedDelegate> _Nullable)inboxItemDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInboxItemDelegate:(id <RSNotificationItemDeletedDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <HandleRSInboxSelectedItem> _Nullable handleInboxSelectedItemDelegate;)
+ (id <HandleRSInboxSelectedItem> _Nullable)handleInboxSelectedItemDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setHandleInboxSelectedItemDelegate:(id <HandleRSInboxSelectedItem> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debug;)
+ (BOOL)debug SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebug:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)sdkRegistrationWithParams:(NSDictionary<NSString *, id> * _Nonnull)params success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)getDeeplinkingDataWithSuccess:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)updatePushTokenWithToken:(NSString * _Nonnull)token;
@end

@class UNNotificationCategory;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)initWithApiWithApiKey:(NSString * _Nonnull)apiKey registerNotificationCategory:(NSSet<UNNotificationCategory *> * _Nullable)category SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("Use this initSdk(withAppId:notificationCategory:success:failure:) instead of current function");
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)setScreenName:(NSString * _Nonnull)name;
+ (void)setScreenNameWithScreenName:(NSString * _Nonnull)screenName;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)registerUserData:(NSString * _Nullable)params;
+ (void)sdkRegistrationWithDictWithParams:(NSDictionary<NSString *, id> * _Nonnull)params;
@end




@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)formDataCaptureWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
+ (void)formDataCaptureWithValues:(NSString * _Nullable)values;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)handleQrLinkWithUrl:(NSString * _Nonnull)url successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
@end

@class UNNotification;
@class UNNotificationResponse;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)setRegularForegroundNotificationWithData:(UNNotification * _Nonnull)data completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
+ (void)setRegularNotificationActionWithResponse:(UNNotificationResponse * _Nonnull)response;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// 3.1  This method returns the list of notification sent by resulticks platform
+ (NSArray * _Nonnull)getNotificationList SWIFT_WARN_UNUSED_RESULT;
/// 3.2 This methods provides the notification list sent by resutlticks platform
/// \param successHandler Success handler provides list of notification iin the form of [Any]
///
+ (void)getNotificationListWithSuccessHandler:(void (^ _Nonnull)(NSArray * _Nonnull))successHandler;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)initSdkWithAppId:(NSString * _Nonnull)id notificationCategory:(NSSet<UNNotificationCategory *> * _Nonnull)category success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_METHOD_FAMILY(none);
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)updateWithLocation:(NSString * _Nullable)location;
+ (void)updateLocationWithLat:(NSString * _Nonnull)strLat long:(NSString * _Nonnull)strLong;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)addCustomEvent:(NSString * _Nullable)event;
+ (void)addEventWithEventName:(NSString * _Nonnull)eventName data:(NSString * _Nullable)data;
+ (void)addEvent:(NSString * _Nonnull)eventName data:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// <ol>
///   <li>
///     This method returns the total notification count from REIOSSDK of type Int
///   </li>
/// </ol>
+ (void)getReadNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 5.1 This method gets the unread count from REIOSSDK local database
/// \param success success provides the exact unread count of type Int
///
+ (void)getUnReadNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 5.2 This method gets the unread count from REIOSSDK local database
/// \param success success provides the exact unread count of type Int
///
+ (void)getTotalNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)appConversionTracking;
+ (void)appConversionTrackingWithDict:(NSDictionary<NSString *, id> * _Nullable)dict;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// Setting up the foreground notification. If it is inapp notification it will be presented by Resulticks other wise it will set to alert notification
/// \param data notification data of type UNNotification
///
/// \param completionHandler Completion handler to present  alert notification
///
+ (void)setForegroundNotificationWithNotification:(UNNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// <ol>
///   <li>
///     Set notification actions
///   </li>
/// </ol>
/// \param response Response that came from notification on click. It can  be default, dismiss, or maybelater
///
+ (void)setNotificationActionWithResponse:(UNNotificationResponse * _Nonnull)response;
+ (void)setForegroundNotification:(NSString * _Nullable)strNotification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
+ (void)setNotificationActionWithStrResponse:(NSString * _Nonnull)strResponse;
+ (void)setCustomNotificationWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// 4.1 Delete selected notification with notification dict
/// \param dict dict is a selected item to delete of type [String: Any]
///
+ (void)deleteNotificationListWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
/// 4.2 Delete selected notification with campaign id
/// \param campaignId camapign id is a unique value of type String used to delete selected item from notification list.
///
+ (void)deleteNotificationByCampaignIdWithCampaignId:(NSString * _Nonnull)campaignId;
/// 4.3 Delete selected notification with notification id
/// \param campaignId notification id is a unique value of type String used to delete selected item from notification list.
///
+ (void)deleteNotificationByNotificationIdWithNotificationId:(NSString * _Nonnull)notificationId;
@end

@class NSURL;
@class NSUserActivity;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)handleOpenlinkWithUrl:(NSURL * _Nonnull)url successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
+ (void)handleUniversalLinkWithUserActivity:(NSUserActivity * _Nonnull)userActivity successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
+ (void)handleDynamicLinkWithUserActivity:(NSUserActivity * _Nonnull)userActivity successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// <ol>
///   <li>
///     This method used to set the read status of inbox notification
///   </li>
/// </ol>
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)readNotificationWithNotificationId:(NSString * _Nonnull)notificationId onSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 6.1 This method used to set the read status of inbox notification to unread
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)unReadNotificationWithNotificationId:(NSString * _Nonnull)notificationId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)readNotificationWithCampaignId:(NSString * _Nonnull)campaignId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)unReadNotificationWithCampaignId:(NSString * _Nonnull)campaignId onSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 7 This method used to set the read status of inbox notification
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)notificationCTAClickedWithNotificationId:(NSString * _Nonnull)notificationId actionId:(NSInteger)actionId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)notificationCTAClickedWithCampaignId:(NSString * _Nonnull)campaignId actionId:(NSInteger)actionId onSuccess:(void (^ _Nonnull)(NSInteger))success;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK25REiosNotificationReceiver_")
@protocol REiosNotificationReceiver
- (void)didReceiveResponseWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK22REiosSmartLinkReceiver_")
@protocol REiosSmartLinkReceiver
- (void)didReceiveSmartLinkWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK15RSInboxDelegate_")
@protocol RSInboxDelegate
- (void)didSelectRSInboxRowWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@class UITextField;
@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@class UISearchBar;
@class UIScrollView;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC8REIOSSDK21RSInboxViewcontroller")
@interface RSInboxViewcontroller : UIViewController <UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate>
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK33RSNotificationItemDeletedDelegate_")
@protocol RSNotificationItemDeletedDelegate
- (void)didDeleteItem;
@end


SWIFT_CLASS_NAMED("ScreenTracking")
@interface ScreenTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface ScreenTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end

@class SocketRawAckView;

/// A class that represents a waiting ack call.
/// <em>NOTE</em>: You should not store this beyond the life of the event handler.
SWIFT_CLASS("_TtC8REIOSSDK16SocketAckEmitter")
@interface SocketAckEmitter : NSObject
/// A view into this emitter where emits do not check for binary data.
/// Usage:
/// \code
/// ack.rawEmitView.with(myObject)
///
/// \endcode<em>NOTE</em>: It is not safe to hold on to this view beyond the life of the socket.
@property (nonatomic, readonly, strong) SocketRawAckView * _Nonnull rawEmitView;
/// Call to ack receiving this event.
/// \param items An array of items to send when acking. Use <code>[]</code> to send nothing.
///
- (void)with:(NSArray * _Nonnull)items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents some event that was received.
SWIFT_CLASS("_TtC8REIOSSDK14SocketAnyEvent")
@interface SocketAnyEvent : NSObject
/// The event name.
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// The data items for this event.
@property (nonatomic, readonly, copy) NSArray * _Nullable items;
/// The description of this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The class that handles the engine.io protocol and transports.
/// See <code>SocketEnginePollable</code> and <code>SocketEngineWebsocket</code> for transport specific methods.
SWIFT_CLASS("_TtC8REIOSSDK12SocketEngine")
@interface SocketEngine : NSObject <NSURLSessionDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Declares that a type will be a delegate to an engine.
SWIFT_PROTOCOL("_TtP8REIOSSDK18SocketEngineClient_")
@protocol SocketEngineClient
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a ping message. Only called in socket.io >3.
- (void)engineDidReceivePing;
/// Called when the engine receives a pong message. Only called in socket.io 2.
- (void)engineDidReceivePong;
/// Called when the engine sends a ping to the server. Only called in socket.io 2.
- (void)engineDidSendPing;
/// Called when the engine sends a pong to the server. Only called in socket.io >3.
- (void)engineDidSendPong;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
@end

/// Represents the type of engine.io packet types.
typedef SWIFT_ENUM(NSInteger, SocketEnginePacketType, open) {
/// Open message.
  SocketEnginePacketTypeOpen = 0,
/// Close message.
  SocketEnginePacketTypeClose = 1,
/// Ping message.
  SocketEnginePacketTypePing = 2,
/// Pong message.
  SocketEnginePacketTypePong = 3,
/// Regular message.
  SocketEnginePacketTypeMessage = 4,
/// Upgrade message.
  SocketEnginePacketTypeUpgrade = 5,
/// NOOP.
  SocketEnginePacketTypeNoop = 6,
};


/// Represents a socket.io-client.
/// Clients are created through a <code>SocketManager</code>, which owns the <code>SocketEngineSpec</code> that controls the connection to the server.
/// For example:
/// \code
/// // Create a socket for the /swift namespace
/// let socket = manager.socket(forNamespace: "/swift")
///
/// // Add some handlers and connect
///
/// \endcode<em>NOTE</em>: The client is not thread/queue safe, all interaction with the socket should be done on the <code>manager.handleQueue</code>
SWIFT_CLASS("_TtC8REIOSSDK14SocketIOClient")
@interface SocketIOClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents state of a manager or client.
typedef SWIFT_ENUM(NSInteger, SocketIOStatus, open) {
/// The client/manager has never been connected. Or the client has been reset.
  SocketIOStatusNotConnected = 0,
/// The client/manager was once connected, but not anymore.
  SocketIOStatusDisconnected = 1,
/// The client/manager is in the process of connecting.
  SocketIOStatusConnecting = 2,
/// The client/manager is currently connected.
  SocketIOStatusConnected = 3,
};


/// A manager for a socket.io connection.
/// A <code>SocketManager</code> is responsible for multiplexing multiple namespaces through a single <code>SocketEngineSpec</code>.
/// Example:
/// \code
/// let manager = SocketManager(socketURL: URL(string:"http://localhost:8080/")!)
/// let defaultNamespaceSocket = manager.defaultSocket
/// let swiftSocket = manager.socket(forNamespace: "/swift")
///
/// // defaultNamespaceSocket and swiftSocket both share a single connection to the server
///
/// \endcodeSockets created through the manager are retained by the manager. So at the very least, a single strong reference
/// to the manager must be maintained to keep sockets alive.
/// To disconnect a socket and remove it from the manager, either call <code>SocketIOClient.disconnect()</code> on the socket,
/// or call one of the <code>disconnectSocket</code> methods on this class.
/// <em>NOTE</em>: The manager is not thread/queue safe, all interaction with the manager should be done on the <code>handleQueue</code>
SWIFT_CLASS("_TtC8REIOSSDK13SocketManager")
@interface SocketManager : NSObject
/// Not so type safe way to create a SocketIOClient, meant for Objective-C compatiblity.
/// If using Swift it’s recommended to use <code>init(socketURL: NSURL, options: Set<SocketIOClientOption>)</code>
/// \param socketURL The url of the socket.io server.
///
/// \param config The config for this socket.
///
- (nonnull instancetype)initWithSocketURL:(NSURL * _Nonnull)socketURL config:(NSDictionary<NSString *, id> * _Nullable)config;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a ping message.
- (void)engineDidReceivePing;
/// Called when the sends a ping to the server.
- (void)engineDidSendPing;
/// Called when the engine receives a pong message.
- (void)engineDidReceivePong;
/// Called when the sends a pong to the server.
- (void)engineDidSendPong;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that gives a backwards compatible way to cause an emit not to recursively check for Data objects.
/// Usage:
/// \code
/// ack.rawEmitView.with(myObject)
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK16SocketRawAckView")
@interface SocketRawAckView : NSObject
/// Call to ack receiving this event.
/// \param items An array of items to send when acking. Use <code>[]</code> to send nothing.
///
- (void)with:(NSArray * _Nonnull)items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that gives a backwards compatible way to cause an emit not to recursively check for Data objects.
/// Usage:
/// \code
/// socket.rawEmitView.emit("myEvent", myObject)
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK13SocketRawView")
@interface SocketRawView : NSObject
/// Same as emit, but meant for Objective-C
/// \param event The event to send.
///
/// \param items The items to send with this event. Send an empty array to send no data.
///
- (void)emit:(NSString * _Nonnull)event with:(NSArray * _Nonnull)items;
/// Same as emitWithAck, but for Objective-C
/// <em>NOTE</em>: It is up to the server send an ack back, just calling this method does not mean the server will ack.
/// Check that your server’s api will ack the event being sent.
/// Example:
/// \code
/// socket.emitWithAck("myEvent", with: [1]).timingOut(after: 1) {data in
///     ...
/// }
///
/// \endcode\param event The event to send.
///
/// \param items The items to send with this event. Use <code>[]</code> to send nothing.
///
///
/// returns:
/// An <code>OnAckCallback</code>. You must call the <code>timingOut(after:)</code> method before the event will be sent.
- (OnAckCallback * _Nonnull)emitWithAck:(NSString * _Nonnull)event with:(NSArray * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef REIOSSDK_SWIFT_H
#define REIOSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="REIOSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CampaignTracking")
@interface CampaignTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSObject;
@class NSDate;

@interface CampaignTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


SWIFT_CLASS("_TtC8REIOSSDK11Deeplinking")
@interface Deeplinking : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS_NAMED("EventTracking")
@interface EventTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface EventTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


SWIFT_CLASS_NAMED("FieldTracking")
@interface FieldTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

@interface FieldTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, copy) NSString * _Nullable captureType;
@property (nonatomic, copy) NSString * _Nullable identifier;
@property (nonatomic, copy) NSString * _Nullable formId;
@property (nonatomic, copy) NSString * _Nullable screenName;
@property (nonatomic, copy) NSString * _Nullable descriptionn;
@property (nonatomic, copy) NSString * _Nullable campaignId;
@property (nonatomic, copy) NSString * _Nullable markAsGoal;
@property (nonatomic, copy) NSString * _Nullable minDuration;
@property (nonatomic, copy) NSString * _Nullable minLength;
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end

@class NSStream;

SWIFT_CLASS("_TtC8REIOSSDK19FoundationTransport")
@interface FoundationTransport : NSObject <NSStreamDelegate>
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK25HandleRSInboxSelectedItem_")
@protocol HandleRSInboxSelectedItem
- (void)didSendSelectedItemWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@class UIButton;

SWIFT_PROTOCOL("_TtP8REIOSSDK19InAppButtonDelegate_")
@protocol InAppButtonDelegate
- (void)didTapInappBUttonWithButton:(UIButton * _Nonnull)button;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK18InappCloseDelegate_")
@protocol InappCloseDelegate
- (void)closeInappContainer;
@end






@class NSURLSession;
@class NSURLSessionWebSocketTask;
@class NSData;

SWIFT_CLASS("_TtC8REIOSSDK12NativeEngine") SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(watchos,introduced=6.0) SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(macos,introduced=10.15)
@interface NativeEngine : NSObject <NSURLSessionDataDelegate, NSURLSessionWebSocketDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8REIOSSDK19NotificationHandler")
@interface NotificationHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS_NAMED("NotificationList")
@interface NotificationList : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationList (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end


/// A class that represents an emit that will request an ack that has not yet been sent.
/// Call <code>timingOut(after:callback:)</code> to complete the emit
/// Example:
/// \code
/// socket.emitWithAck("myEvent").timingOut(after: 1) {data in
///     ...
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK13OnAckCallback")
@interface OnAckCallback : NSObject
/// Completes an emitWithAck. If this isn’t called, the emit never happens.
/// \param seconds The number of seconds before this emit times out if an ack hasn’t been received.
///
/// \param callback The callback called when an ack is received, or when a timeout happens.
/// To check for timeout, use <code>SocketAckStatus</code>’s <code>noAck</code> case.
///
- (void)timingOutAfter:(double)seconds callback:(void (^ _Nonnull)(NSArray * _Nonnull))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK29REiosContentExtensionReceiver_")
@protocol REiosContentExtensionReceiver
- (void)didCloseContentExtention;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK21REiosDeeplinkReceiver_")
@protocol REiosDeeplinkReceiver
- (void)didReceiveDeeplinkWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@protocol REiosNotificationReceiver;
@protocol REiosSmartLinkReceiver;
@protocol RSInboxDelegate;
@protocol RSNotificationItemDeletedDelegate;

SWIFT_CLASS("_TtC8REIOSSDK12REiosHandler")
@interface REiosHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isBarndHandleInboxSelectedItem;)
+ (BOOL)isBarndHandleInboxSelectedItem SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsBarndHandleInboxSelectedItem:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosNotificationReceiver> _Nullable notificationDelegate;)
+ (id <REiosNotificationReceiver> _Nullable)notificationDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationDelegate:(id <REiosNotificationReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosDeeplinkReceiver> _Nullable deeplinkDelegate;)
+ (id <REiosDeeplinkReceiver> _Nullable)deeplinkDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeeplinkDelegate:(id <REiosDeeplinkReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosSmartLinkReceiver> _Nullable smartLinkDelegate;)
+ (id <REiosSmartLinkReceiver> _Nullable)smartLinkDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setSmartLinkDelegate:(id <REiosSmartLinkReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <RSInboxDelegate> _Nullable inboxDelegate;)
+ (id <RSInboxDelegate> _Nullable)inboxDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInboxDelegate:(id <RSInboxDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <InAppButtonDelegate> _Nullable inappButtonDelegate;)
+ (id <InAppButtonDelegate> _Nullable)inappButtonDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInappButtonDelegate:(id <InAppButtonDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <InappCloseDelegate> _Nullable inappCloseButtonDelegate;)
+ (id <InappCloseDelegate> _Nullable)inappCloseButtonDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInappCloseButtonDelegate:(id <InappCloseDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <REiosContentExtensionReceiver> _Nullable contentExtDelegate;)
+ (id <REiosContentExtensionReceiver> _Nullable)contentExtDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setContentExtDelegate:(id <REiosContentExtensionReceiver> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <RSNotificationItemDeletedDelegate> _Nullable inboxItemDelegate;)
+ (id <RSNotificationItemDeletedDelegate> _Nullable)inboxItemDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setInboxItemDelegate:(id <RSNotificationItemDeletedDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <HandleRSInboxSelectedItem> _Nullable handleInboxSelectedItemDelegate;)
+ (id <HandleRSInboxSelectedItem> _Nullable)handleInboxSelectedItemDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setHandleInboxSelectedItemDelegate:(id <HandleRSInboxSelectedItem> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debug;)
+ (BOOL)debug SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebug:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)sdkRegistrationWithParams:(NSDictionary<NSString *, id> * _Nonnull)params success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)getDeeplinkingDataWithSuccess:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)updatePushTokenWithToken:(NSString * _Nonnull)token;
@end

@class UNNotificationCategory;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)initWithApiWithApiKey:(NSString * _Nonnull)apiKey registerNotificationCategory:(NSSet<UNNotificationCategory *> * _Nullable)category SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("Use this initSdk(withAppId:notificationCategory:success:failure:) instead of current function");
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)setScreenName:(NSString * _Nonnull)name;
+ (void)setScreenNameWithScreenName:(NSString * _Nonnull)screenName;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)registerUserData:(NSString * _Nullable)params;
+ (void)sdkRegistrationWithDictWithParams:(NSDictionary<NSString *, id> * _Nonnull)params;
@end




@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)formDataCaptureWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
+ (void)formDataCaptureWithValues:(NSString * _Nullable)values;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)handleQrLinkWithUrl:(NSString * _Nonnull)url successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
@end

@class UNNotification;
@class UNNotificationResponse;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)setRegularForegroundNotificationWithData:(UNNotification * _Nonnull)data completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
+ (void)setRegularNotificationActionWithResponse:(UNNotificationResponse * _Nonnull)response;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// 3.1  This method returns the list of notification sent by resulticks platform
+ (NSArray * _Nonnull)getNotificationList SWIFT_WARN_UNUSED_RESULT;
/// 3.2 This methods provides the notification list sent by resutlticks platform
/// \param successHandler Success handler provides list of notification iin the form of [Any]
///
+ (void)getNotificationListWithSuccessHandler:(void (^ _Nonnull)(NSArray * _Nonnull))successHandler;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)initSdkWithAppId:(NSString * _Nonnull)id notificationCategory:(NSSet<UNNotificationCategory *> * _Nonnull)category success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_METHOD_FAMILY(none);
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)updateWithLocation:(NSString * _Nullable)location;
+ (void)updateLocationWithLat:(NSString * _Nonnull)strLat long:(NSString * _Nonnull)strLong;
@end



@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)addCustomEvent:(NSString * _Nullable)event;
+ (void)addEventWithEventName:(NSString * _Nonnull)eventName data:(NSString * _Nullable)data;
+ (void)addEvent:(NSString * _Nonnull)eventName data:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// <ol>
///   <li>
///     This method returns the total notification count from REIOSSDK of type Int
///   </li>
/// </ol>
+ (void)getReadNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 5.1 This method gets the unread count from REIOSSDK local database
/// \param success success provides the exact unread count of type Int
///
+ (void)getUnReadNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 5.2 This method gets the unread count from REIOSSDK local database
/// \param success success provides the exact unread count of type Int
///
+ (void)getTotalNotificationCountOnSuccess:(void (^ _Nonnull)(NSInteger))success;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)appConversionTracking;
+ (void)appConversionTrackingWithDict:(NSDictionary<NSString *, id> * _Nullable)dict;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// Setting up the foreground notification. If it is inapp notification it will be presented by Resulticks other wise it will set to alert notification
/// \param data notification data of type UNNotification
///
/// \param completionHandler Completion handler to present  alert notification
///
+ (void)setForegroundNotificationWithNotification:(UNNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// <ol>
///   <li>
///     Set notification actions
///   </li>
/// </ol>
/// \param response Response that came from notification on click. It can  be default, dismiss, or maybelater
///
+ (void)setNotificationActionWithResponse:(UNNotificationResponse * _Nonnull)response;
+ (void)setForegroundNotification:(NSString * _Nullable)strNotification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
+ (void)setNotificationActionWithStrResponse:(NSString * _Nonnull)strResponse;
+ (void)setCustomNotificationWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// 4.1 Delete selected notification with notification dict
/// \param dict dict is a selected item to delete of type [String: Any]
///
+ (void)deleteNotificationListWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
/// 4.2 Delete selected notification with campaign id
/// \param campaignId camapign id is a unique value of type String used to delete selected item from notification list.
///
+ (void)deleteNotificationByCampaignIdWithCampaignId:(NSString * _Nonnull)campaignId;
/// 4.3 Delete selected notification with notification id
/// \param campaignId notification id is a unique value of type String used to delete selected item from notification list.
///
+ (void)deleteNotificationByNotificationIdWithNotificationId:(NSString * _Nonnull)notificationId;
@end

@class NSURL;
@class NSUserActivity;

@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
+ (void)handleOpenlinkWithUrl:(NSURL * _Nonnull)url successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
+ (void)handleUniversalLinkWithUserActivity:(NSUserActivity * _Nonnull)userActivity successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
+ (void)handleDynamicLinkWithUserActivity:(NSUserActivity * _Nonnull)userActivity successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSString * _Nonnull))failureHandler;
@end


@interface REiosHandler (SWIFT_EXTENSION(REIOSSDK))
/// <ol>
///   <li>
///     This method used to set the read status of inbox notification
///   </li>
/// </ol>
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)readNotificationWithNotificationId:(NSString * _Nonnull)notificationId onSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 6.1 This method used to set the read status of inbox notification to unread
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)unReadNotificationWithNotificationId:(NSString * _Nonnull)notificationId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)readNotificationWithCampaignId:(NSString * _Nonnull)campaignId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)unReadNotificationWithCampaignId:(NSString * _Nonnull)campaignId onSuccess:(void (^ _Nonnull)(NSInteger))success;
/// 7 This method used to set the read status of inbox notification
/// \param notificationId notificationId is a unique id used to set read status
///
/// \param success success is a completion handler which provides a count of unread status
///
+ (void)notificationCTAClickedWithNotificationId:(NSString * _Nonnull)notificationId actionId:(NSInteger)actionId onSuccess:(void (^ _Nonnull)(NSInteger))success;
+ (void)notificationCTAClickedWithCampaignId:(NSString * _Nonnull)campaignId actionId:(NSInteger)actionId onSuccess:(void (^ _Nonnull)(NSInteger))success;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK25REiosNotificationReceiver_")
@protocol REiosNotificationReceiver
- (void)didReceiveResponseWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK22REiosSmartLinkReceiver_")
@protocol REiosSmartLinkReceiver
- (void)didReceiveSmartLinkWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK15RSInboxDelegate_")
@protocol RSInboxDelegate
- (void)didSelectRSInboxRowWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@class UITextField;
@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@class UISearchBar;
@class UIScrollView;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC8REIOSSDK21RSInboxViewcontroller")
@interface RSInboxViewcontroller : UIViewController <UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate>
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP8REIOSSDK33RSNotificationItemDeletedDelegate_")
@protocol RSNotificationItemDeletedDelegate
- (void)didDeleteItem;
@end


SWIFT_CLASS_NAMED("ScreenTracking")
@interface ScreenTracking : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface ScreenTracking (SWIFT_EXTENSION(REIOSSDK))
@property (nonatomic, strong) NSObject * _Nullable dict;
@property (nonatomic, copy) NSDate * _Nullable date;
@end

@class SocketRawAckView;

/// A class that represents a waiting ack call.
/// <em>NOTE</em>: You should not store this beyond the life of the event handler.
SWIFT_CLASS("_TtC8REIOSSDK16SocketAckEmitter")
@interface SocketAckEmitter : NSObject
/// A view into this emitter where emits do not check for binary data.
/// Usage:
/// \code
/// ack.rawEmitView.with(myObject)
///
/// \endcode<em>NOTE</em>: It is not safe to hold on to this view beyond the life of the socket.
@property (nonatomic, readonly, strong) SocketRawAckView * _Nonnull rawEmitView;
/// Call to ack receiving this event.
/// \param items An array of items to send when acking. Use <code>[]</code> to send nothing.
///
- (void)with:(NSArray * _Nonnull)items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents some event that was received.
SWIFT_CLASS("_TtC8REIOSSDK14SocketAnyEvent")
@interface SocketAnyEvent : NSObject
/// The event name.
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// The data items for this event.
@property (nonatomic, readonly, copy) NSArray * _Nullable items;
/// The description of this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The class that handles the engine.io protocol and transports.
/// See <code>SocketEnginePollable</code> and <code>SocketEngineWebsocket</code> for transport specific methods.
SWIFT_CLASS("_TtC8REIOSSDK12SocketEngine")
@interface SocketEngine : NSObject <NSURLSessionDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Declares that a type will be a delegate to an engine.
SWIFT_PROTOCOL("_TtP8REIOSSDK18SocketEngineClient_")
@protocol SocketEngineClient
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a ping message. Only called in socket.io >3.
- (void)engineDidReceivePing;
/// Called when the engine receives a pong message. Only called in socket.io 2.
- (void)engineDidReceivePong;
/// Called when the engine sends a ping to the server. Only called in socket.io 2.
- (void)engineDidSendPing;
/// Called when the engine sends a pong to the server. Only called in socket.io >3.
- (void)engineDidSendPong;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
@end

/// Represents the type of engine.io packet types.
typedef SWIFT_ENUM(NSInteger, SocketEnginePacketType, open) {
/// Open message.
  SocketEnginePacketTypeOpen = 0,
/// Close message.
  SocketEnginePacketTypeClose = 1,
/// Ping message.
  SocketEnginePacketTypePing = 2,
/// Pong message.
  SocketEnginePacketTypePong = 3,
/// Regular message.
  SocketEnginePacketTypeMessage = 4,
/// Upgrade message.
  SocketEnginePacketTypeUpgrade = 5,
/// NOOP.
  SocketEnginePacketTypeNoop = 6,
};


/// Represents a socket.io-client.
/// Clients are created through a <code>SocketManager</code>, which owns the <code>SocketEngineSpec</code> that controls the connection to the server.
/// For example:
/// \code
/// // Create a socket for the /swift namespace
/// let socket = manager.socket(forNamespace: "/swift")
///
/// // Add some handlers and connect
///
/// \endcode<em>NOTE</em>: The client is not thread/queue safe, all interaction with the socket should be done on the <code>manager.handleQueue</code>
SWIFT_CLASS("_TtC8REIOSSDK14SocketIOClient")
@interface SocketIOClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents state of a manager or client.
typedef SWIFT_ENUM(NSInteger, SocketIOStatus, open) {
/// The client/manager has never been connected. Or the client has been reset.
  SocketIOStatusNotConnected = 0,
/// The client/manager was once connected, but not anymore.
  SocketIOStatusDisconnected = 1,
/// The client/manager is in the process of connecting.
  SocketIOStatusConnecting = 2,
/// The client/manager is currently connected.
  SocketIOStatusConnected = 3,
};


/// A manager for a socket.io connection.
/// A <code>SocketManager</code> is responsible for multiplexing multiple namespaces through a single <code>SocketEngineSpec</code>.
/// Example:
/// \code
/// let manager = SocketManager(socketURL: URL(string:"http://localhost:8080/")!)
/// let defaultNamespaceSocket = manager.defaultSocket
/// let swiftSocket = manager.socket(forNamespace: "/swift")
///
/// // defaultNamespaceSocket and swiftSocket both share a single connection to the server
///
/// \endcodeSockets created through the manager are retained by the manager. So at the very least, a single strong reference
/// to the manager must be maintained to keep sockets alive.
/// To disconnect a socket and remove it from the manager, either call <code>SocketIOClient.disconnect()</code> on the socket,
/// or call one of the <code>disconnectSocket</code> methods on this class.
/// <em>NOTE</em>: The manager is not thread/queue safe, all interaction with the manager should be done on the <code>handleQueue</code>
SWIFT_CLASS("_TtC8REIOSSDK13SocketManager")
@interface SocketManager : NSObject
/// Not so type safe way to create a SocketIOClient, meant for Objective-C compatiblity.
/// If using Swift it’s recommended to use <code>init(socketURL: NSURL, options: Set<SocketIOClientOption>)</code>
/// \param socketURL The url of the socket.io server.
///
/// \param config The config for this socket.
///
- (nonnull instancetype)initWithSocketURL:(NSURL * _Nonnull)socketURL config:(NSDictionary<NSString *, id> * _Nullable)config;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a ping message.
- (void)engineDidReceivePing;
/// Called when the sends a ping to the server.
- (void)engineDidSendPing;
/// Called when the engine receives a pong message.
- (void)engineDidReceivePong;
/// Called when the sends a pong to the server.
- (void)engineDidSendPong;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that gives a backwards compatible way to cause an emit not to recursively check for Data objects.
/// Usage:
/// \code
/// ack.rawEmitView.with(myObject)
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK16SocketRawAckView")
@interface SocketRawAckView : NSObject
/// Call to ack receiving this event.
/// \param items An array of items to send when acking. Use <code>[]</code> to send nothing.
///
- (void)with:(NSArray * _Nonnull)items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that gives a backwards compatible way to cause an emit not to recursively check for Data objects.
/// Usage:
/// \code
/// socket.rawEmitView.emit("myEvent", myObject)
///
/// \endcode
SWIFT_CLASS("_TtC8REIOSSDK13SocketRawView")
@interface SocketRawView : NSObject
/// Same as emit, but meant for Objective-C
/// \param event The event to send.
///
/// \param items The items to send with this event. Send an empty array to send no data.
///
- (void)emit:(NSString * _Nonnull)event with:(NSArray * _Nonnull)items;
/// Same as emitWithAck, but for Objective-C
/// <em>NOTE</em>: It is up to the server send an ack back, just calling this method does not mean the server will ack.
/// Check that your server’s api will ack the event being sent.
/// Example:
/// \code
/// socket.emitWithAck("myEvent", with: [1]).timingOut(after: 1) {data in
///     ...
/// }
///
/// \endcode\param event The event to send.
///
/// \param items The items to send with this event. Use <code>[]</code> to send nothing.
///
///
/// returns:
/// An <code>OnAckCallback</code>. You must call the <code>timingOut(after:)</code> method before the event will be sent.
- (OnAckCallback * _Nonnull)emitWithAck:(NSString * _Nonnull)event with:(NSArray * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
